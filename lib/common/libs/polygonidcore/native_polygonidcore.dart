// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `ios/Classes/libpolygonid.h`.
class NativePolygonIdCoreLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativePolygonIdCoreLib(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativePolygonIdCoreLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int> ___mb_cur_max =
      _lookup<ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Char>>('suboptarg');

  ffi.Pointer<ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Char> value) => _suboptarg.value = value;

  int PLGNAuthV2InputsMarshal(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAuthV2InputsMarshal(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNAuthV2InputsMarshalPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAuthV2InputsMarshal');
  late final _PLGNAuthV2InputsMarshal = _PLGNAuthV2InputsMarshalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNCalculateGenesisID(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNCalculateGenesisID(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNCalculateGenesisIDPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNCalculateGenesisID');
  late final _PLGNCalculateGenesisID = _PLGNCalculateGenesisIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNNewGenesisID(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNNewGenesisID(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNNewGenesisIDPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNNewGenesisID');
  late final _PLGNNewGenesisID = _PLGNNewGenesisIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNNewGenesisIDFromEth(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNNewGenesisIDFromEth(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNNewGenesisIDFromEthPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNNewGenesisIDFromEth');
  late final _PLGNNewGenesisIDFromEth = _PLGNNewGenesisIDFromEthPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNCreateClaim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNCreateClaim(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNCreateClaimPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNCreateClaim');
  late final _PLGNCreateClaim = _PLGNCreateClaimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNIDToInt(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNIDToInt(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNIDToIntPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNIDToInt');
  late final _PLGNIDToInt = _PLGNIDToIntPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNProofFromSmartContract(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNProofFromSmartContract(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNProofFromSmartContractPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNProofFromSmartContract');
  late final _PLGNProofFromSmartContract =
      _PLGNProofFromSmartContractPtr.asFunction<
          int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNProfileID(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNProfileID(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNProfileIDPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNProfileID');
  late final _PLGNProfileID = _PLGNProfileIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAtomicQuerySigV2Inputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAtomicQuerySigV2Inputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAtomicQuerySigV2InputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAtomicQuerySigV2Inputs');
  late final _PLGNAtomicQuerySigV2Inputs =
      _PLGNAtomicQuerySigV2InputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNSigV2Inputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNSigV2Inputs(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNSigV2InputsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNSigV2Inputs');
  late final _PLGNSigV2Inputs = _PLGNSigV2InputsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAtomicQueryMtpV2Inputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAtomicQueryMtpV2Inputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAtomicQueryMtpV2InputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAtomicQueryMtpV2Inputs');
  late final _PLGNAtomicQueryMtpV2Inputs =
      _PLGNAtomicQueryMtpV2InputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNMtpV2Inputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNMtpV2Inputs(
      jsonResponse,
      in1,
      status,
    );
  }

  late final _PLGNMtpV2InputsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNMtpV2Inputs');
  late final _PLGNMtpV2Inputs = _PLGNMtpV2InputsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAtomicQuerySigV2OnChainInputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAtomicQuerySigV2OnChainInputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAtomicQuerySigV2OnChainInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAtomicQuerySigV2OnChainInputs');
  late final _PLGNAtomicQuerySigV2OnChainInputs =
      _PLGNAtomicQuerySigV2OnChainInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAtomicQueryMtpV2OnChainInputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAtomicQueryMtpV2OnChainInputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAtomicQueryMtpV2OnChainInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAtomicQueryMtpV2OnChainInputs');
  late final _PLGNAtomicQueryMtpV2OnChainInputs =
      _PLGNAtomicQueryMtpV2OnChainInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAtomicQueryV3Inputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAtomicQueryV3Inputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAtomicQueryV3InputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAtomicQueryV3Inputs');
  late final _PLGNAtomicQueryV3Inputs = _PLGNAtomicQueryV3InputsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAtomicQueryV3OnChainInputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAtomicQueryV3OnChainInputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAtomicQueryV3OnChainInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNAtomicQueryV3OnChainInputs');
  late final _PLGNAtomicQueryV3OnChainInputs =
      _PLGNAtomicQueryV3OnChainInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNALinkedMultiQueryInputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNALinkedMultiQueryInputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNALinkedMultiQueryInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNALinkedMultiQueryInputs');
  late final _PLGNALinkedMultiQueryInputs =
      _PLGNALinkedMultiQueryInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNAGenerateInputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNAGenerateInputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNAGenerateInputsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNAGenerateInputs');
  late final _PLGNAGenerateInputs = _PLGNAGenerateInputsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  void PLGNFreeStatus(
    ffi.Pointer<PLGNStatus> status,
  ) {
    return _PLGNFreeStatus(
      status,
    );
  }

  late final _PLGNFreeStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PLGNStatus>)>>(
          'PLGNFreeStatus');
  late final _PLGNFreeStatus =
      _PLGNFreeStatusPtr.asFunction<void Function(ffi.Pointer<PLGNStatus>)>();

  int PLGNCleanCache(
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNCleanCache(
      status,
    );
  }

  late final _PLGNCleanCachePtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNCleanCache');
  late final _PLGNCleanCache = _PLGNCleanCachePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNCleanCache2(
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNCleanCache2(
      cfg,
      status,
    );
  }

  late final _PLGNCleanCache2Ptr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNCleanCache2');
  late final _PLGNCleanCache2 = _PLGNCleanCache2Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNCacheCredentials(
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNCacheCredentials(
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNCacheCredentialsPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNCacheCredentials');
  late final _PLGNCacheCredentials = _PLGNCacheCredentialsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNW3CCredentialFromOnchainHex(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNW3CCredentialFromOnchainHex(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNW3CCredentialFromOnchainHexPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNW3CCredentialFromOnchainHex');
  late final _PLGNW3CCredentialFromOnchainHex =
      _PLGNW3CCredentialFromOnchainHexPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNW3CCredentialFromAnonAadhaarInputs(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNW3CCredentialFromAnonAadhaarInputs(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNW3CCredentialFromAnonAadhaarInputsPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNW3CCredentialFromAnonAadhaarInputs');
  late final _PLGNW3CCredentialFromAnonAadhaarInputs =
      _PLGNW3CCredentialFromAnonAadhaarInputsPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNDescribeID(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNDescribeID(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNDescribeIDPtr = _lookup<
      ffi.NativeFunction<
          GoUint8 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>('PLGNDescribeID');
  late final _PLGNDescribeID = _PLGNDescribeIDPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNBabyJubJubSignPoseidon(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNBabyJubJubSignPoseidon(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNBabyJubJubSignPoseidonPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNBabyJubJubSignPoseidon');
  late final _PLGNBabyJubJubSignPoseidon =
      _PLGNBabyJubJubSignPoseidonPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNBabyJubJubVerifyPoseidon(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNBabyJubJubVerifyPoseidon(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNBabyJubJubVerifyPoseidonPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNBabyJubJubVerifyPoseidon');
  late final _PLGNBabyJubJubVerifyPoseidon =
      _PLGNBabyJubJubVerifyPoseidonPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNBabyJubJubPrivate2Public(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNBabyJubJubPrivate2Public(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNBabyJubJubPrivate2PublicPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNBabyJubJubPrivate2Public');
  late final _PLGNBabyJubJubPrivate2Public =
      _PLGNBabyJubJubPrivate2PublicPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNBabyJubJubPublicUncompress(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNBabyJubJubPublicUncompress(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNBabyJubJubPublicUncompressPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNBabyJubJubPublicUncompress');
  late final _PLGNBabyJubJubPublicUncompress =
      _PLGNBabyJubJubPublicUncompressPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();

  int PLGNBabyJubJubPublicCompress(
    ffi.Pointer<ffi.Pointer<ffi.Char>> jsonResponse,
    ffi.Pointer<ffi.Char> in1,
    ffi.Pointer<ffi.Char> cfg,
    ffi.Pointer<ffi.Pointer<PLGNStatus>> status,
  ) {
    return _PLGNBabyJubJubPublicCompress(
      jsonResponse,
      in1,
      cfg,
      status,
    );
  }

  late final _PLGNBabyJubJubPublicCompressPtr = _lookup<
          ffi.NativeFunction<
              GoUint8 Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<PLGNStatus>>)>>(
      'PLGNBabyJubJubPublicCompress');
  late final _PLGNBabyJubJubPublicCompress =
      _PLGNBabyJubJubPublicCompressPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<PLGNStatus>>)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

enum idtype_t {
  P_ALL(0),
  P_PID(1),
  P_PGID(2);

  final int value;
  const idtype_t(this.value);

  static idtype_t fromValue(int value) => switch (value) {
        0 => P_ALL,
        1 => P_PID,
        2 => P_PGID,
        _ => throw ArgumentError("Unknown value for idtype_t: $value"),
      };
}

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

final class __siginfo extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class wait extends ffi.Opaque {}

enum PLGNStatusCode {
  PLGNSTATUSCODE_ERROR(0),
  PLGNSTATUSCODE_NIL_POINTER(1),
  PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_EXTRACTION_ERROR(2),
  PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_RESOLVE_ERROR(3),
  PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_MT_BUILD_ERROR(4),
  PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_MT_STATE_ERROR(5),
  PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_REVOKED_ERROR(6),
  PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_EXTRACTION_ERROR(7),
  PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_RESOLVE_ERROR(8),
  PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_MT_BUILD_ERROR(9),
  PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_MT_STATE_ERROR(10),
  PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_REVOKED_ERROR(11);

  final int value;
  const PLGNStatusCode(this.value);

  static PLGNStatusCode fromValue(int value) => switch (value) {
        0 => PLGNSTATUSCODE_ERROR,
        1 => PLGNSTATUSCODE_NIL_POINTER,
        2 => PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_EXTRACTION_ERROR,
        3 => PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_RESOLVE_ERROR,
        4 => PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_MT_BUILD_ERROR,
        5 => PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_MT_STATE_ERROR,
        6 => PLGNSTATUSCODE_USER_CREDENTIAL_STATUS_REVOKED_ERROR,
        7 => PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_EXTRACTION_ERROR,
        8 => PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_RESOLVE_ERROR,
        9 => PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_MT_BUILD_ERROR,
        10 => PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_MT_STATE_ERROR,
        11 => PLGNSTATUSCODE_ISSUER_CREDENTIAL_STATUS_REVOKED_ERROR,
        _ => throw ArgumentError("Unknown value for PLGNStatusCode: $value"),
      };
}

typedef GoUint8 = ffi.UnsignedChar;
typedef DartGoUint8 = int;
typedef PLGNStatus = _PLGNStatus;

final class _PLGNStatus extends ffi.Struct {
  @ffi.UnsignedInt()
  external int statusAsInt;

  PLGNStatusCode get status => PLGNStatusCode.fromValue(statusAsInt);

  external ffi.Pointer<ffi.Char> error_msg;
}

const int __has_safe_buffers = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __API_TO_BE_DEPRECATED = 100000;

const int __API_TO_BE_DEPRECATED_MACOS = 100000;

const int __API_TO_BE_DEPRECATED_IOS = 100000;

const int __API_TO_BE_DEPRECATED_MACCATALYST = 100000;

const int __API_TO_BE_DEPRECATED_WATCHOS = 100000;

const int __API_TO_BE_DEPRECATED_TVOS = 100000;

const int __API_TO_BE_DEPRECATED_DRIVERKIT = 100000;

const int __API_TO_BE_DEPRECATED_VISIONOS = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_5 = 101405;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __MAC_12_4 = 120400;

const int __MAC_12_5 = 120500;

const int __MAC_12_6 = 120600;

const int __MAC_12_7 = 120700;

const int __MAC_13_0 = 130000;

const int __MAC_13_1 = 130100;

const int __MAC_13_2 = 130200;

const int __MAC_13_3 = 130300;

const int __MAC_13_4 = 130400;

const int __MAC_13_5 = 130500;

const int __MAC_13_6 = 130600;

const int __MAC_14_0 = 140000;

const int __MAC_14_1 = 140100;

const int __MAC_14_2 = 140200;

const int __MAC_14_3 = 140300;

const int __MAC_14_4 = 140400;

const int __MAC_14_5 = 140500;

const int __MAC_15_0 = 150000;

const int __MAC_15_1 = 150100;

const int __MAC_15_2 = 150200;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_4 = 140400;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __IPHONE_15_5 = 150500;

const int __IPHONE_15_6 = 150600;

const int __IPHONE_15_7 = 150700;

const int __IPHONE_15_8 = 150800;

const int __IPHONE_16_0 = 160000;

const int __IPHONE_16_1 = 160100;

const int __IPHONE_16_2 = 160200;

const int __IPHONE_16_3 = 160300;

const int __IPHONE_16_4 = 160400;

const int __IPHONE_16_5 = 160500;

const int __IPHONE_16_6 = 160600;

const int __IPHONE_16_7 = 160700;

const int __IPHONE_17_0 = 170000;

const int __IPHONE_17_1 = 170100;

const int __IPHONE_17_2 = 170200;

const int __IPHONE_17_3 = 170300;

const int __IPHONE_17_4 = 170400;

const int __IPHONE_17_5 = 170500;

const int __IPHONE_18_0 = 180000;

const int __IPHONE_18_1 = 180100;

const int __IPHONE_18_2 = 180200;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int __WATCHOS_8_6 = 80600;

const int __WATCHOS_8_7 = 80700;

const int __WATCHOS_8_8 = 80800;

const int __WATCHOS_9_0 = 90000;

const int __WATCHOS_9_1 = 90100;

const int __WATCHOS_9_2 = 90200;

const int __WATCHOS_9_3 = 90300;

const int __WATCHOS_9_4 = 90400;

const int __WATCHOS_9_5 = 90500;

const int __WATCHOS_9_6 = 90600;

const int __WATCHOS_10_0 = 100000;

const int __WATCHOS_10_1 = 100100;

const int __WATCHOS_10_2 = 100200;

const int __WATCHOS_10_3 = 100300;

const int __WATCHOS_10_4 = 100400;

const int __WATCHOS_10_5 = 100500;

const int __WATCHOS_11_0 = 110000;

const int __WATCHOS_11_1 = 110100;

const int __WATCHOS_11_2 = 110200;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __TVOS_15_5 = 150500;

const int __TVOS_15_6 = 150600;

const int __TVOS_16_0 = 160000;

const int __TVOS_16_1 = 160100;

const int __TVOS_16_2 = 160200;

const int __TVOS_16_3 = 160300;

const int __TVOS_16_4 = 160400;

const int __TVOS_16_5 = 160500;

const int __TVOS_16_6 = 160600;

const int __TVOS_17_0 = 170000;

const int __TVOS_17_1 = 170100;

const int __TVOS_17_2 = 170200;

const int __TVOS_17_3 = 170300;

const int __TVOS_17_4 = 170400;

const int __TVOS_17_5 = 170500;

const int __TVOS_18_0 = 180000;

const int __TVOS_18_1 = 180100;

const int __TVOS_18_2 = 180200;

const int __BRIDGEOS_2_0 = 20000;

const int __BRIDGEOS_3_0 = 30000;

const int __BRIDGEOS_3_1 = 30100;

const int __BRIDGEOS_3_4 = 30400;

const int __BRIDGEOS_4_0 = 40000;

const int __BRIDGEOS_4_1 = 40100;

const int __BRIDGEOS_5_0 = 50000;

const int __BRIDGEOS_5_1 = 50100;

const int __BRIDGEOS_5_3 = 50300;

const int __BRIDGEOS_6_0 = 60000;

const int __BRIDGEOS_6_2 = 60200;

const int __BRIDGEOS_6_4 = 60400;

const int __BRIDGEOS_6_5 = 60500;

const int __BRIDGEOS_6_6 = 60600;

const int __BRIDGEOS_7_0 = 70000;

const int __BRIDGEOS_7_1 = 70100;

const int __BRIDGEOS_7_2 = 70200;

const int __BRIDGEOS_7_3 = 70300;

const int __BRIDGEOS_7_4 = 70400;

const int __BRIDGEOS_7_6 = 70600;

const int __BRIDGEOS_8_0 = 80000;

const int __BRIDGEOS_8_1 = 80100;

const int __BRIDGEOS_8_2 = 80200;

const int __BRIDGEOS_8_3 = 80300;

const int __BRIDGEOS_8_4 = 80400;

const int __BRIDGEOS_8_5 = 80500;

const int __BRIDGEOS_9_0 = 90000;

const int __BRIDGEOS_9_1 = 90100;

const int __BRIDGEOS_9_2 = 90200;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __DRIVERKIT_22_0 = 220000;

const int __DRIVERKIT_22_4 = 220400;

const int __DRIVERKIT_22_5 = 220500;

const int __DRIVERKIT_22_6 = 220600;

const int __DRIVERKIT_23_0 = 230000;

const int __DRIVERKIT_23_1 = 230100;

const int __DRIVERKIT_23_2 = 230200;

const int __DRIVERKIT_23_3 = 230300;

const int __DRIVERKIT_23_4 = 230400;

const int __DRIVERKIT_23_5 = 230500;

const int __DRIVERKIT_24_0 = 240000;

const int __DRIVERKIT_24_1 = 240100;

const int __DRIVERKIT_24_2 = 240200;

const int __VISIONOS_1_0 = 10000;

const int __VISIONOS_1_1 = 10100;

const int __VISIONOS_1_2 = 10200;

const int __VISIONOS_2_0 = 20000;

const int __VISIONOS_2_1 = 20100;

const int __VISIONOS_2_2 = 20200;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_5 = 101405;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_15_4 = 101504;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_VERSION_11_4 = 110400;

const int MAC_OS_VERSION_11_5 = 110500;

const int MAC_OS_VERSION_11_6 = 110600;

const int MAC_OS_VERSION_12_0 = 120000;

const int MAC_OS_VERSION_12_1 = 120100;

const int MAC_OS_VERSION_12_2 = 120200;

const int MAC_OS_VERSION_12_3 = 120300;

const int MAC_OS_VERSION_12_4 = 120400;

const int MAC_OS_VERSION_12_5 = 120500;

const int MAC_OS_VERSION_12_6 = 120600;

const int MAC_OS_VERSION_12_7 = 120700;

const int MAC_OS_VERSION_13_0 = 130000;

const int MAC_OS_VERSION_13_1 = 130100;

const int MAC_OS_VERSION_13_2 = 130200;

const int MAC_OS_VERSION_13_3 = 130300;

const int MAC_OS_VERSION_13_4 = 130400;

const int MAC_OS_VERSION_13_5 = 130500;

const int MAC_OS_VERSION_13_6 = 130600;

const int MAC_OS_VERSION_14_0 = 140000;

const int MAC_OS_VERSION_14_1 = 140100;

const int MAC_OS_VERSION_14_2 = 140200;

const int MAC_OS_VERSION_14_3 = 140300;

const int MAC_OS_VERSION_14_4 = 140400;

const int MAC_OS_VERSION_14_5 = 140500;

const int MAC_OS_VERSION_15_0 = 150000;

const int MAC_OS_VERSION_15_1 = 150100;

const int MAC_OS_VERSION_15_2 = 150200;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 140000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 150200;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_V6 = 6;

const int RUSAGE_INFO_CURRENT = 6;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY = 10;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT = 0;

const int IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON = 1;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT = 0;

const int IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int BYTE_ORDER = 1234;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;
